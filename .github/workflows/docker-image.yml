name: Helm CI/CD

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: kimjaeyoung98/flask-app

jobs:
  deploy:
    runs-on: self-hosted  # Windows self-hosted Runner 환경

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Remove previous builder (PowerShell-safe)
      shell: pwsh
      run: |
        try {
          docker buildx rm mybuilder -ErrorAction Stop
        } catch {
          Write-Host "No previous builder found. Continuing..."
        }


    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        name: mybuilder

    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.IMAGE_NAME }}:latest
        no-cache: true  

    - name: Set up Kubeconfig
      run: |
        $kubeDir = "$HOME\.kube"
        if (-Not (Test-Path $kubeDir)) {
          New-Item -ItemType Directory -Path $kubeDir | Out-Null
        }
        [System.Text.Encoding]::UTF8.GetString(
          [Convert]::FromBase64String("${{ secrets.KUBECONFIG_DATA }}")
        ) | Set-Content -Path "$kubeDir\config"
      shell: powershell

    - name: Install Helm manually
      run: |
        Invoke-WebRequest -Uri https://get.helm.sh/helm-v3.13.0-windows-amd64.zip -OutFile helm.zip
        Expand-Archive -Path helm.zip -DestinationPath .
        Move-Item -Path .\windows-amd64\helm.exe -Destination "C:\Windows\System32\helm.exe" -Force
      shell: powershell


    - name: Generate Helm release tag
      run: |
        $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
        echo "HELM_RELEASE_TAG=release-$timestamp" >> $env:GITHUB_ENV
      shell: powershell


    - name: Deploy with Helm
      run: |
        helm upgrade --install flask-app ./flask-chart -n default --create-namespace `
          --set image.repository=${{ env.IMAGE_NAME }} `
          --set image.tag=latest `
          --version ${{ env.HELM_RELEASE_TAG }}
      shell: powershell
