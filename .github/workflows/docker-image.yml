# name: Helm CI/CD with Tag-Based Rollout ver. Unix 2

# on:
#   push:
#     branches:
#       - main

# env:
#   IMAGE_NAME: kimjaeyoung98/flask-app

# jobs:
#   deploy:
#     runs-on: self-hosted

#     strategy:
#       matrix:
#         environment: [dev, stage, prod]

#     steps:
#     - name: Checkout source code
#       uses: actions/checkout@v4

#     - name: Remove previous builder (if exists)
#       run: docker buildx rm mybuilder || true

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v3
#       with:
#         name: mybuilder
#         use: true

#     - name: Log in to DockerHub
#       uses: docker/login-action@v3
#       with:
#         username: ${{ secrets.DOCKER_USERNAME }}
#         password: ${{ secrets.DOCKER_PASSWORD }}

#     - name: Generate unique release tag
#       run: echo "HELM_RELEASE_TAG=release-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

#     - name: Build and push Docker image
#       uses: docker/build-push-action@v5
#       with:
#         context: .
#         push: true
#         tags: |
#           ${{ env.IMAGE_NAME }}:latest
#           ${{ env.IMAGE_NAME }}:${{ env.HELM_RELEASE_TAG }}
#         no-cache: true

#     - name: Set up Kubeconfig
#       run: |
#         mkdir -p ~/.kube
#         echo "${{ secrets.KUBECONFIG_DATA }}" | base64 -d > ~/.kube/config
#         chmod 600 ~/.kube/config

#     # - name: Deploy with Helm using release tag
#     #   run: |
#     #     helm upgrade --install flask-app ./flask-chart -n default --create-namespace \
#     #       --set image.repository=${{ env.IMAGE_NAME }} \
#     #       --set image.tag=${{ env.HELM_RELEASE_TAG }} \
#     #       --set image.pullPolicy=Always

#     - name: Deploy to ${{ matrix.environment }} via Helm
#       run: |
#         helm upgrade --install flask-app-${{ matrix.environment }} ./flask-chart \
#           -n ${{ matrix.environment }} --create-namespace \
#           -f flask-chart/values-${{ matrix.environment }}.yaml \
#           --set image.repository=${{ env.IMAGE_NAME }} \
#           --set image.tag=${{ env.HELM_RELEASE_TAG }} \
#           --set image.pullPolicy=Always
name: Helm CI/CD – GitOps Release   # v3 (GitOps 전환)

on:
  push:
    branches:
      - main  

permissions:
  contents: write 

env:
  IMAGE_NAME: kimjaeyoung98/flask-app

jobs:
  build-and-release:
    runs-on: self-hosted        # Linux 환경 가정
    steps:
    # 1) 소스 코드 체크아웃
    - name: Checkout source code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0          # Git 히스토리 전체 필요 시

    # # 2) (선택) 이전 buildx 정리
    # - name: Remove previous builder (if exists)
    #   run: docker buildx rm mybuilder || true

    # 3) Buildx 설정
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        name: mybuilder
        use: true

    # 4) Docker Hub 로그인
    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 5) 릴리스 태그 생성 (immutable)
    - name: Generate unique release tag
      id: tag
      run: echo "HELM_RELEASE_TAG=release-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

    # 6) 이미지 빌드·푸시
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.IMAGE_NAME }}:${{ env.HELM_RELEASE_TAG }}
          ${{ env.IMAGE_NAME }}:latest
        no-cache: true

    # 7) yq 설치(간단 apt 사용) ─ GitHub Hosted라면 sudo 필요
    # - name: Install yq
    #   run: |
    #     sudo apt-get update -y
    #     sudo apt-get install -y yq

    # 8) Helm values 파일의 tag 치환
    - name: Patch image tag in Helm values (dev/stage/prod)
      run: |
        for ENV in dev stage prod; do
          yq -i -y ".image.tag = \"${{ env.HELM_RELEASE_TAG }}\"" flask-chart/values-${ENV}.yaml
        done
    # 9) Git 커밋 & 푸시
    - name: Commit updated values files
      env:
        TAG: ${{ env.HELM_RELEASE_TAG }}
      run: |
        git config user.name  "github-actions"
        git config user.email "actions@github.com"
        git add flask-chart/values-*.yaml
        # 변경 사항이 있는 경우에만 커밋
        if ! git diff --cached --quiet; then
          git commit -m "ci: deploy $TAG"
          git push
        else
          echo "No values file changes detected – skipping commit."
        fi

# 끝.
