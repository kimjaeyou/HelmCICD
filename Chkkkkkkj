import org.springframework.http.converter.HttpMessageConversionException;
import org.springframework.web.client.*;
import org.springframework.web.client.HttpStatusCodeException;

public class UnifiedCatchException extends RuntimeException {
    private final int status;         // HTTP 또는 대응 상태
    private final String respCode;    // 사내 표준 응답코드
    private final String respBody;    // 사내 표준 응답바디(JSON 등 원문/가공문)

    private UnifiedCatchException(int status, String respCode, String respBody, Throwable cause) {
        super(respBody, cause);
        this.status = status;
        this.respCode = respCode;
        this.respBody = respBody;
    }

    public int getStatus() { return status; }
    public String getRespCode() { return respCode; }
    public String getRespBody() { return respBody; }

    // 핵심: 다양한 예외를 "하나"로 매핑
    public static UnifiedCatchException from(Throwable ex) {
        // 1) HTTP 상태 포함 예외(4xx/5xx)
        if (ex instanceof HttpStatusCodeException) {
            HttpStatusCodeException e = (HttpStatusCodeException) ex;
            int status = e.getRawStatusCode();


            String body  = safe(e.getResponseBodyAsString());
            String code  = (status >= 400 && status < 500) ? "HTTP_CLIENT_ERROR" : "HTTP_SERVER_ERROR";
            return new UnifiedCatchException(status, code, nonEmpty(body, e.getStatusText()), e);
        }
        // 2) 네트워크/타임아웃
        if (ex instanceof ResourceAccessException) {
            return new UnifiedCatchException(504, "NETWORK_TIMEOUT",
                    "{\"message\":\"network timeout or connection error\"}", ex);
        }
        // 3) 메시지 변환(직/역직렬화)
        if (ex instanceof HttpMessageConversionException) {
            return new UnifiedCatchException(422, "MESSAGE_CONVERSION_ERROR",
                    "{\"message\":\"http message conversion failed\"}", ex);
        }
        // 4) 기타 RestTemplate 계열
        if (ex instanceof RestClientException) {
            return new UnifiedCatchException(502, "REST_CLIENT_ERROR",
                    "{\"message\":\"rest client error\"}", ex);
        }
        // 5) 최종 안전망
        return new UnifiedCatchException(500, "UNKNOWN_ERROR",
                "{\"message\":\"unknown error\"}", ex);
    }

    // 호출부에서 "기존 시스템 예외"로 재던지기
    public void rethrowAsMicro() {
        throw new MicroServiceException(this.status, this.respCode, this.respBody);
    }

    private static String safe(String s) { return s == null ? "" : s; }
    private static String nonEmpty(String prefer, String fallback) {
        return (prefer == null || prefer.isBlank()) ? safe(fallback) : prefer;
    }
}






import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

public class RestOps {
    private final RestTemplate rt;
    public RestOps(RestTemplate rt) { this.rt = rt; }

    public <T> ResponseEntity<T> get(String url, Class<T> type) {
        try {
            return rt.getForEntity(url, type);
        } catch (Exception ex) {
            throw UnifiedCatchException.from(ex); // 어떤 예외든 하나로 통일
        }
    }

    // 필요하면 post/put 등도 동일 패턴으로 추가
}







import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api")
public class MyController {
    private final RestOps ops;
    public MyController(RestTemplate rt) {
        this.ops = new RestOps(rt);
    }

    @GetMapping("/test")
    public String test() {
        try {
            return ops.get("https://example.com/api/data", String.class).getBody();
        } catch (UnifiedCatchException uce) {
            uce.rethrowAsMicro();     // 기존 MicroServiceException 으로 통일해 던짐
            throw new AssertionError("unreachable");
        }
    }
}
