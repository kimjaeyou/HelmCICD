import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.*;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

@RestController
@RequestMapping("/proxy")
public class ProxyUploadController {

    private final RestTemplate restTemplate = new RestTemplate();

    @PostMapping("/upload")
    public ResponseEntity<String> proxyUpload(
            @RequestPart("file") MultipartFile file,
            @RequestParam("project_id") String projectId,
            @RequestParam(value = "metadata", required = false) String metadata,
            @RequestParam(value = "path", required = false, defaultValue = "") String path,
            @RequestParam(value = "is_quick_upload", required = false, defaultValue = "false") boolean isQuickUpload
    ) throws Exception {

        // MultipartFile → ByteArrayResource 변환
        ByteArrayResource fileResource = new ByteArrayResource(file.getBytes()) {
            @Override
            public String getFilename() {
                // 반드시 파일명 리턴해야 form-data에 filename="..." 들어감
                return file.getOriginalFilename();
            }
        };

        // form-data 구성
        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("file", fileResource);
        body.add("project_id", projectId);
        body.add("metadata", metadata);
        body.add("path", path);
        body.add("is_quick_upload", String.valueOf(isQuickUpload));

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

        // 최종 서버 URL
        String finalUrl = "http://final-server.com/api/upload";

        // RequestEntity 생성
        RequestEntity<MultiValueMap<String, Object>> requestEntity =
                RequestEntity.post(finalUrl)
                        .headers(headers)
                        .body(body);

        // 최종 서버로 전송
        ResponseEntity<String> response = restTemplate.exchange(requestEntity, String.class);

        return ResponseEntity.status(response.getStatusCode()).body(response.getBody());
    }
}
