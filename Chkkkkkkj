import org.springframework.http.converter.HttpMessageConversionException;
import org.springframework.web.client.*;
import org.springframework.web.client.HttpStatusCodeException;

public class UnifiedCatchException extends RuntimeException {
    private final int status;         // HTTP 또는 대응 상태
    private final String respCode;    // 사내 표준 응답코드
    private final String respBody;    // 사내 표준 응답바디(JSON 등 원문/가공문)

    private UnifiedCatchException(int status, String respCode, String respBody, Throwable cause) {
        super(respBody, cause);
        this.status = status;
        this.respCode = respCode;
        this.respBody = respBody;
    }

    public int getStatus() { return status; }
    public String getRespCode() { return respCode; }
    public String getRespBody() { return respBody; }

    // 핵심: 다양한 예외를 "하나"로 매핑
    public static UnifiedCatchException from(Throwable ex) {
        // 1) HTTP 상태 포함 예외(4xx/5xx)
        if (ex instanceof HttpStatusCodeException) {
            HttpStatusCodeException e = (HttpStatusCodeException) ex;
            int status = e.getRawStatusCode();


            String body  = safe(e.getResponseBodyAsString());
            String code  = (status >= 400 && status < 500) ? "HTTP_CLIENT_ERROR" : "HTTP_SERVER_ERROR";
            return new UnifiedCatchException(status, code, nonEmpty(body, e.getStatusText()), e);
        }
        // 2) 네트워크/타임아웃
        if (ex instanceof ResourceAccessException) {
            return new UnifiedCatchException(504, "NETWORK_TIMEOUT",
                    "{\"message\":\"network timeout or connection error\"}", ex);
        }
        // 3) 메시지 변환(직/역직렬화)
        if (ex instanceof HttpMessageConversionException) {
            return new UnifiedCatchException(422, "MESSAGE_CONVERSION_ERROR",
                    "{\"message\":\"http message conversion failed\"}", ex);
        }
        // 4) 기타 RestTemplate 계열
        if (ex instanceof RestClientException) {
            return new UnifiedCatchException(502, "REST_CLIENT_ERROR",
                    "{\"message\":\"rest client error\"}", ex);
        }
        // 5) 최종 안전망
        return new UnifiedCatchException(500, "UNKNOWN_ERROR",
                "{\"message\":\"unknown error\"}", ex);
    }

    // 호출부에서 "기존 시스템 예외"로 재던지기
    public void rethrowAsMicro() {
        throw new MicroServiceException(this.status, this.respCode, this.respBody);
    }

    private static String safe(String s) { return s == null ? "" : s; }
    private static String nonEmpty(String prefer, String fallback) {
        return (prefer == null || prefer.isBlank()) ? safe(fallback) : prefer;
    }
}





import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

public class RestOps {
    private final RestTemplate rt;
    public RestOps(RestTemplate rt) { this.rt = rt; }

    // ✅ GET
    public <T> ResponseEntity<T> get(String url, Class<T> type) {
        try {
            return rt.getForEntity(url, type);
        } catch (Exception ex) {
            throw UnifiedCatchException.from(ex);
        }
    }

    // ✅ POST (body 전송)
    public <T, R> ResponseEntity<R> post(String url, T request, Class<R> responseType) {
        try {
            return rt.postForEntity(url, request, responseType);
        } catch (Exception ex) {
            throw UnifiedCatchException.from(ex);
        }
    }

    // ✅ PUT (응답 없음)
    public <T> void put(String url, T request) {
        try {
            rt.put(url, request);
        } catch (Exception ex) {
            throw UnifiedCatchException.from(ex);
        }
    }

    // ✅ DELETE
    public void delete(String url) {
        try {
            rt.delete(url);
        } catch (Exception ex) {
            throw UnifiedCatchException.from(ex);
        }
    }

    // ✅ EXCHANGE (모든 HTTP 메서드 지원)
    public <T> ResponseEntity<T> exchange(String url, HttpMethod method, HttpEntity<?> entity, Class<T> responseType) {
        try {
            return rt.exchange(url, method, entity, responseType);
        } catch (Exception ex) {
            throw UnifiedCatchException.from(ex);
        }
    }
}





// GET
ResponseEntity<String> res1 = restOps.get("https://example.com/api/data", String.class);

// POST
MyRequest req = new MyRequest("foo", 123);
ResponseEntity<MyResponse> res2 = restOps.post("https://example.com/api/create", req, MyResponse.class);

// PUT
restOps.put("https://example.com/api/update/1", req);

// DELETE
restOps.delete("https://example.com/api/delete/1");

// EXCHANGE (헤더 필요할 때)
HttpHeaders headers = new HttpHeaders();
headers.set("Authorization", "Bearer token");
HttpEntity<MyRequest> entity = new HttpEntity<>(req, headers);
ResponseEntity<MyResponse> res3 = restOps.exchange(
    "https://example.com/api/custom",
    HttpMethod.POST,
    entity,
    MyResponse.class
);
